AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Email:
    Type: String
    Default: ''

Resources:
  #Bucket where the original video is uploaded
  VideoBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'bucket-${AWS::AccountId}-${AWS::Region}-input-video'
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  VideoBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref VideoBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: HttpsOnly
            Action: 's3:*'
            Effect: Deny
            Principal: '*'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref VideoBucket
                  - /*
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref VideoBucket
            Condition:
              Bool:
                'aws:SecureTransport': false

  #Bucket where the transcribed file is uploaded
  TranscribedBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'bucket-${AWS::AccountId}-${AWS::Region}-transcribed'
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  TranscribedBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Sid: HttpsOnly
            Action: 's3:*'
            Effect: Deny
            Principal: '*'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref TranscribedBucket
                  - /*
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref TranscribedBucket
            Condition:
              Bool:
                aws:SecureTransport': false
      Bucket: !Ref TranscribedBucket

  #Bucket where the translated file is uploaded
  TranslateBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'bucket-${AWS::AccountId}-${AWS::Region}-translate'
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  TranslateBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Sid: HttpsOnly
            Action: 's3:*'
            Effect: Deny
            Principal: '*'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref TranslateBucket
                  - /*
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref TranslateBucket
            Condition:
              Bool:
                aws:SecureTransport': false
      Bucket: !Ref TranslateBucket

  #Bucket where the assets - title, description and tags are uploaded
  DescriptionBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'bucket-${AWS::AccountId}-${AWS::Region}-video-description'
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DescriptionBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Sid: HttpsOnly
            Action: 's3:*'
            Effect: Deny
            Principal: '*'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DescriptionBucket
                  - /*
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DescriptionBucket
            Condition:
              Bool:
                aws:SecureTransport': false
      Bucket: !Ref DescriptionBucket

  #Bucket where the audio file is uploaded
  AudioTextBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'bucket-${AWS::AccountId}-${AWS::Region}-audiotext'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  AudioTextBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Sid: HttpsOnly
            Action: 's3:*'
            Effect: Deny
            Principal: '*'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref AudioTextBucket
                  - /*
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref AudioTextBucket
            Condition:
              Bool:
                aws:SecureTransport': false
      Bucket: !Ref AudioTextBucket

  #Bucket where the finalized video is uploaded
  DubbedBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub 'bucket-${AWS::AccountId}-${AWS::Region}-dubbed'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  DubbedBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Sid: HttpsOnly
            Action: 's3:*'
            Effect: Deny
            Principal: '*'
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DubbedBucket
                  - /*
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref DubbedBucket
            Condition:
              Bool:
                aws:SecureTransport': false
      Bucket: !Ref DubbedBucket

  # SNS Topic and subscription that is used to send emails to the end user
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email

  # AWS Lambda function that signs an S3 url to be shared
  GetSignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: handler.getSignedURL
      Runtime: nodejs16.x
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref TranscribedBucket
        - S3CrudPolicy:
            BucketName: !Ref TranslateBucket
        - S3CrudPolicy:
            BucketName: !Ref AudioTextBucket
        - S3CrudPolicy:
            BucketName: !Ref DubbedBucket
        - S3CrudPolicy:
            BucketName: !Ref DescriptionBucket

Outputs:
  VideoBucketName:
    Description: 'Name of the bucket where the original video is uploaded'
    Value: !Ref VideoBucket
  TranscribeBucketName:
    Description: 'Name of the bucket where the transcriptd file is uploaded'
    Value: !Ref TranscribedBucket
  TranslatedBucketName:
    Description: 'Name of the bucket where the translated file is uploaded'
    Value: !Ref TranslateBucket
  DescriptionBucketName:
    Description: 'Name of the bucket where the title, description and tags are uploaded'
    Value: !Ref DescriptionBucket
  AudioTextBucketName:
    Description: 'Name of the bucket where the audio file is uploaded'
    Value: !Ref AudioTextBucket
  DubbedBucketName:
    Description: 'Name of the bucket where the finalized file is uploaded'
    Value: !Ref DubbedBucket
  NotificationTopicARN:
    Description: 'Topic ARN of the topic used to send emails'
    Value: !Ref NotificationTopic
  NotificationTopicName:
    Description: 'Topic name of the topic used to send emails'
    Value: !GetAtt NotificationTopic.TopicName
  GetSignedURLFunctionName:
    Description: 'Function name of the function that signs an s3 url to be shared'
    Value: !Ref GetSignedUrlFunction
